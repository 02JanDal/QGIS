/***************************************************************************
  qgsopenclutils.h - QgsOpenClUtils

 ---------------------
 begin                : 11.4.2018
 copyright            : (C) 2018 by Alessandro Pasotti
 email                : elpaso at itopen dot it
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
#ifndef QGSOPENCLUTILS_H
#define QGSOPENCLUTILS_H

#define SIP_NO_FILE

#define CL_HPP_ENABLE_EXCEPTIONS
#define CL_HPP_MINIMUM_OPENCL_VERSION 110
#define CL_HPP_TARGET_OPENCL_VERSION 110
#include <CL/cl2.hpp>

#include "qgis_core.h"
#include "qgis.h"

#include "cpl_conv.h"

/**
 * \ingroup core
 * \class QgsOpenClUtils
 * \brief The QgsOpenClUtils class is responsible for common OpenCL operations such as
 * - enable/disable opencl
 * - store and retrieve preferences for the default device
 * - check opencl device availability and automatically choose the first GPU (TODO: let the user choose & override!)
 * - creating contexts
 * - loading program sources from standard locations
 * - build programs and log errors
 * \since QGIS 3.4
 * \note not available in Python bindings
 */
class CORE_EXPORT QgsOpenClUtils
{
    Q_GADGET

  public:

    /**
     * The ExceptionBehavior enum define how exceptions generated by OpenCL should be treated
     */
    enum ExceptionBehavior
    {
      Catch,  // Write errors in the message log and silently fail
      Throw   // Write errors in the message log and re-throw exceptions
    };

    /**
     * The Type enum represent OpenCL device type
     */
    enum HardwareType
    {
      CPU,
      GPU,
      Other
    };

    Q_ENUM( HardwareType )

    /**
     * The Info enum maps to OpenCL info constants
     *
     * \see deviceInfo()
     */
    enum Info
    {
      Name = CL_DEVICE_NAME,
      Vendor = CL_DEVICE_VENDOR,
      Version = CL_DEVICE_VERSION,
      Profile = CL_DEVICE_PROFILE,
      ImageSupport = CL_DEVICE_IMAGE_SUPPORT,
      Image2dMaxWidth = CL_DEVICE_IMAGE2D_MAX_WIDTH,
      Image2dMaxHeight = CL_DEVICE_IMAGE2D_MAX_HEIGHT,
      MaxMemAllocSize = CL_DEVICE_MAX_MEM_ALLOC_SIZE,
      Type = CL_DEVICE_TYPE // CPU/GPU etc.
    };

    //! Return true if OpenCL is enabled in the user settings
    static bool enabled();

    //! Return a list of OpenCL devices found on this sysytem
    static std::vector<cl::Device> devices();

    //! Return the active device
    static cl::Device activeDevice( );

    //! Set the active \a device
    static void setActiveDevice( const cl::Device device );

    //! Store in the settings the preferred \a deviceId device identifier
    static void storePreferredDevice( const QString deviceId );

    //! Read from the settings the preferred device identifier
    static QString preferredDevice( );

    //! Create a string identifier from a \a device
    static QString deviceId( const cl::Device device );

    /**
     * Activate a device identified by its \a preferredDeviceId by making it the default device
     * if the device does not exists or deviceId is empty, the first GPU device will be
     * activated
     * \return true if the device could be found and activated. Return false if the device was already
     * the active one or if it could not be found.
     */
    static bool activate( const QString preferredDeviceId = QString() );

    /**
     * Returns a formatted description for the \a device
     */
    static QString deviceDescription( const cl::Device device );

    /**
     * Returns a formatted description for the device identified by \a deviceId
     */
    static QString deviceDescription( const QString deviceId );

    /**
     * Checks whether a suitable OpenCL platform and device is found on this system and initialize the QGIS OpenCL system
     * This function must be called before using QGIS OpenCL utils
     */
    static bool available();

    //! Set the OpenCL user setting to \a enabled
    static void setEnabled( bool enabled );

    //! Extract and return the build log error from \a error
    static QString buildLog( cl::BuildError &error );

    //! Read an OpenCL source file from \a path
    static QString sourceFromPath( const QString &path );

    //! Return the full path to a an OpenCL source file from the \a baseName ('.cl' extension is automatically appended)
    static QString sourceFromBaseName( const QString &baseName );

    //! OpenCL string for message logs
    static QLatin1String LOGMESSAGE_TAG;

    //! Return a string representation from an OpenCL \a errorCode
    static QString errorText( const int errorCode );

    /**
     * Build the program from \a source in the given \a context and depending on \a exeptionBehavior
     * can throw or catch the exceptions
     * \return the built program
     */
    static cl::Program buildProgram( const cl::Context &context, const QString &source, ExceptionBehavior exceptionBehavior = Catch );

    /**
     * Context factory
     *
     * \return a new context for the default device or an invalid context if
     *         no device were identified or OpenCL support is not available
     *         and enabled
     */
    static cl::Context context();

    //! Return the base path to OpenCL program directory
    static QString sourcePath();

    //! Set the  base path to OpenCL program directory
    static void setSourcePath( const QString &value );

    //! Return \a infoType information about the default device
    static QString defaultDeviceInfo( const Info infoType = Info::Name );

    //! Return \a infoType information about the \a device
    static QString deviceInfo( const Info infoType, cl::Device device );

    /**
     * Tiny smart-pointer-like wrapper around CPLMalloc and CPLFree: this is needed because
     * OpenCL C++ API may throw exceptions
     */
    template <typename T>
    struct CPLAllocator
    {

      public:

        explicit CPLAllocator( unsigned long size ): mMem( ( T * )CPLMalloc( sizeof( T ) * size ) ) { }

        ~CPLAllocator()
        {
          CPLFree( ( void * )mMem );
        }

        void reset( T *newData )
        {
          if ( mMem )
            CPLFree( ( void * )mMem );
          mMem = newData;
        }

        void reset( unsigned long size )
        {
          reset( ( T * )CPLMalloc( sizeof( T ) *size ) );
        }

        T &operator* ()
        {
          return &mMem[0];
        }

        T *release()
        {
          T *tmpMem = mMem;
          mMem = nullptr;
          return tmpMem;
        }

        T &operator[]( const int index )
        {
          return mMem[index];
        }

        T *get()
        {
          return mMem;
        }

      private:

        T *mMem = nullptr;
    };


  private:
    QgsOpenClUtils();
    static void init();
    static bool sAvailable;
    static cl::Device sActiveDevice;
    static cl::Platform sDefaultPlatform;
    static QLatin1String SETTINGS_GLOBAL_ENABLED_KEY;
    static QLatin1String SETTINGS_DEFAULT_DEVICE_KEY;
    static QString sSourcePath;
};



#endif // QGSOPENCLUTILS_H
