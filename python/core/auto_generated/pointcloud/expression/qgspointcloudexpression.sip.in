/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpression.h             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsPointCloudExpression
{
%Docstring(signature="appended")
Class for parsing and evaluation of expressions (formerly called "search strings").
The expressions try to follow both syntax and semantics of SQL expressions.

Usage:

.. code-block:: python

       exp = QgsPointCloudExpression("gid*2 > 10 and type not in ('D','F')")
       if exp.hasParserError():
           # show error message with parserErrorString() and exit

       result = exp.evaluate(feature, fields)
       if exp.hasEvalError():
           # show error message with evalErrorString()
       else:
           # examine the result

Three Value Logic
-----------------

Similarly to SQL, this class supports three-value logic: true/false/unknown.
Unknown value may be a result of operations with missing data (NULL). Please note
that NULL is different value than zero or an empty string. For example
3 > NULL returns unknown.

There is no special (three-value) 'boolean' type: true/false is represented as
1/0 integer, unknown value is represented the same way as NULL values: NULL QVariant.

Performance
-----------

For better performance with many evaluations you may first call prepare(fields) function
to find out indices of columns and then repeatedly call evaluate(feature).

Type conversion
---------------

Operators and functions that expect arguments to be of a particular
type automatically convert the arguments to that type, e.g. sin('2.1') will convert
the argument to a double, length(123) will first convert the number to a string.
Explicit conversion can be achieved with to_int, to_real, to_string functions.
If implicit or explicit conversion is invalid, the evaluation returns an error.
Comparison operators do numeric comparison in case both operators are numeric (int/double)
or they can be converted to numeric types.

Implicit sharing
----------------

This class is implicitly shared, copying has a very low overhead.
It is normally preferable to call `QgsPointCloudExpression( otherExpression )` instead of
`QgsPointCloudExpression( otherExpression.expression() )`. A deep copy will only be made
when :py:func:`~prepare` is called. For usage this means mainly, that you should
normally keep an unprepared master copy of a :py:class:`QgsPointCloudExpression` and whenever using it
with a particular :py:class:`QgsFeatureIterator` copy it just before and prepare it using the
same context as the iterator.

Implicit sharing was added in 2.14
%End

%TypeHeaderCode
#include "qgspointcloudexpression.h"
%End
  public:

    struct ParserError
    {
      enum ParserErrorType
      {
        Unknown,
        FunctionUnknown,
        FunctionWrongArgs,
        FunctionInvalidParams,
        FunctionNamedArgsError
      };

      ParserErrorType errorType;

      QString errorMsg;

      int firstLine;

      int firstColumn;

      int lastLine;

      int lastColumn;
    };

    QgsPointCloudExpression( const QString &expr );
%Docstring
Creates a new expression based on the provided string.
The string will immediately be parsed. :py:func:`~QgsPointCloudExpression.prepare` should
be called before evaluation.

.. versionadded:: 3.26
%End

    QgsPointCloudExpression( const QgsPointCloudExpression &other );
%Docstring
Create a copy of this expression. This is preferred
over recreating an expression from a string since
it does not need to be re-parsed.

.. versionadded:: 3.26
%End



    QgsPointCloudExpression();
%Docstring
Create an empty expression.

.. versionadded:: 3.26
%End

    ~QgsPointCloudExpression();

    bool operator==( const QgsPointCloudExpression &other ) const;

    bool isValid() const;
%Docstring
Checks if this expression is valid.
A valid expression could be parsed but does not necessarily evaluate properly.

.. versionadded:: 3.26
%End

    bool hasParserError() const;
%Docstring
Returns ``True`` if an error occurred when parsing the input expression

.. versionadded:: 3.26
%End

    QString parserErrorString() const;
%Docstring
Returns parser error

.. versionadded:: 3.26
%End

    QList<QgsPointCloudExpression::ParserError> parserErrors() const;
%Docstring
Returns parser error details including location of error.

.. versionadded:: 3.26
%End

    const QgsPointCloudExpressionNode *rootNode() const;
%Docstring
Returns the root node of the expression.

The root node is ``None`` if parsing has failed.

.. versionadded:: 3.26
%End

    bool prepare( const QgsPointCloudBlock *block );
%Docstring
Gets the expression ready for evaluation.

:param block: pointer to the :py:class:`QgsPointCloudBlock` that will be filtered

.. versionadded:: 3.26
%End

    QSet<QString> referencedAttributes() const;
%Docstring
Gets list of attributes referenced by the expression.

.. versionadded:: 3.26
%End



    double evaluate( int p );
%Docstring
Evaluate the expression for one point.

:return: 0.0 for false or 1.0 for true.

:param p: point number within the block to evaluate

.. versionadded:: 3.26
%End

    bool hasEvalError() const;
%Docstring
Returns ``True`` if an error occurred when evaluating last input

.. versionadded:: 3.26
%End

    QString evalErrorString() const;
%Docstring
Returns evaluation error

.. versionadded:: 3.26
%End

    void setEvalErrorString( const QString &str );
%Docstring
Sets evaluation error (used internally by evaluation functions)

.. versionadded:: 3.26
%End

    static bool checkExpression( const QString &text, const QgsPointCloudBlock *block, QString &errorMessage /Out/ );
%Docstring
Tests whether a string is a valid expression.

:param text: string to test
:param block: :py:class:`QgsPointCloudBlock` to be filtered

:return: - ``True`` if string is a valid expression
         - errorMessage: will be filled with any error message from the validation

.. versionadded:: 3.26
%End

    void setExpression( const QString &expression );
%Docstring
Set the expression string, will reset the whole internal structure.

.. versionadded:: 3.26
%End

    QString expression() const;
%Docstring
Returns the original, unmodified expression string.
If there was none supplied because it was constructed by sole
API calls, :py:func:`~QgsPointCloudExpression.dump` will be used to create one instead.

.. versionadded:: 3.26
%End

    QString dump() const;
%Docstring
Returns an expression string, constructed from the internal
abstract syntax tree. This does not contain any nice whitespace
formatting or comments. In general it is preferable to use
:py:func:`~QgsPointCloudExpression.expression` instead.

.. versionadded:: 3.26
%End


    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsPointCloudExpression: '%1'>" ).arg( sipCpp->expression() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpression.h             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
