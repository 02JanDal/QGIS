/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpression.h             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsPointCloudExpression
{
%Docstring(signature="appended")
Class for parsing and evaluation of expressions for pointcloud filtering.

Usage:

.. code-block:: python

       exp = QgsPointCloudExpression("Z > 10 and Classification in (1, 3, 5)")
       block = QgsPointCloudBlock( ... )
       if exp.hasParserError():
           # show error message with parserErrorString() and exit
       exp.prepare( block )
       result = exp.evaluate( pointNumber )
       if exp.hasEvalError():
           # show error message with evalErrorString()
       else:
           # examine the result

Evaluation result
-----------------

All expression evaluations return doubles
0.0 is considered as False, while any non-zero value is considered as True
NaN is returned on evaluation error

Implicit sharing
----------------

This class is implicitly shared, copying has a very low overhead.
It is normally preferable to call `QgsPointCloudExpression( otherExpression )` instead of
`QgsPointCloudExpression( otherExpression.expression() )`. A deep copy will only be made
when :py:func:`~prepare` is called.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgspointcloudexpression.h"
%End
  public:

    struct ParserError
    {
      enum ParserErrorType
      {
        Unknown,
        FunctionUnknown,
        FunctionWrongArgs,
        FunctionInvalidParams,
        FunctionNamedArgsError
      };

      ParserErrorType errorType;

      QString errorMsg;

      int firstLine;

      int firstColumn;

      int lastLine;

      int lastColumn;
    };

    QgsPointCloudExpression( const QgsExpression &expression );

    QgsPointCloudExpression( const QgsPointCloudExpression &other );
%Docstring
Create a copy of this expression. This is preferred
over recreating an expression from a string since
it does not need to be re-parsed.
%End



    QgsPointCloudExpression();
%Docstring
Create an empty expression.
%End

    ~QgsPointCloudExpression();

    bool operator==( const QgsPointCloudExpression &other ) const;

    bool isValid() const;
%Docstring
Checks if this expression is valid.
A valid expression could be parsed but does not necessarily evaluate properly.
%End

    bool hasParserError() const;
%Docstring
Returns ``True`` if an error occurred when parsing the input expression
%End

    QString parserErrorString() const;
%Docstring
Returns parser error
%End

    QList<QgsPointCloudExpression::ParserError> parserErrors() const;
%Docstring
Returns parser error details including location of error.
%End

    const QgsPointCloudExpressionNode *rootNode() const;
%Docstring
Returns the root node of the expression.

The root node is ``None`` if parsing has failed.
%End

    bool prepare( const QgsPointCloudBlock *block );
%Docstring
Gets the expression ready for evaluation.

:param block: pointer to the :py:class:`QgsPointCloudBlock` that will be filtered
%End

    QSet<QString> referencedAttributes() const;
%Docstring
Gets list of attributes referenced by the expression.
%End



    double evaluate( int p );
%Docstring
Evaluate the expression for one point.

:return: 0.0 for false or 1.0 for true.

:param p: point number within the block to evaluate
%End

    bool hasEvalError() const;
%Docstring
Returns ``True`` if an error occurred when evaluating last input
%End

    QString evalErrorString() const;
%Docstring
Returns evaluation error
%End

    void setEvalErrorString( const QString &str );
%Docstring
Sets evaluation error (used internally by evaluation functions)
%End

    static bool checkExpression( const QgsExpression &expression, const QgsPointCloudBlock *block, QString &errorMessage /Out/ );
%Docstring
Tests whether a string is a valid expression.

:param expression: the :py:class:`QgsExpression` to test
:param block: :py:class:`QgsPointCloudBlock` to be filtered

:return: - ``True`` if string is a valid expression
         - errorMessage: will be filled with any error message from the validation
%End

    void setExpression( const QgsExpression &expression );
%Docstring
Set the expression string, will reset the whole internal structure.
%End

    QString expression() const;
%Docstring
Returns the original, unmodified expression string.
If there was none supplied because it was constructed by sole
API calls, :py:func:`~QgsPointCloudExpression.dump` will be used to create one instead.
%End

    QString dump() const;
%Docstring
Returns an expression string, constructed from the internal
abstract syntax tree. This does not contain any nice whitespace
formatting or comments. In general it is preferable to use
:py:func:`~QgsPointCloudExpression.expression` instead.
%End


    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsPointCloudExpression: '%1'>" ).arg( sipCpp->expression() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpression.h             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
