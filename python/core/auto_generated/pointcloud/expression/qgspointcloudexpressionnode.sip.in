/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpressionnode.h         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






class QgsPointCloudExpressionNode /Abstract/
{
%Docstring(signature="appended")

Abstract base class for all nodes that can appear in an expression.
%End

%TypeHeaderCode
#include "qgspointcloudexpressionnode.h"
%End
%ConvertToSubClassCode
    switch ( sipCpp->nodeType() )
    {
      case QgsPointCloudExpressionNode::ntUnaryOperator:
        sipType = sipType_QgsPointCloudExpressionNodeUnaryOperator;
        break;
      case QgsPointCloudExpressionNode::ntBinaryOperator:
        sipType = sipType_QgsPointCloudExpressionNodeBinaryOperator;
        break;
      case QgsExpressionNode::ntInOperator:
        sipType = sipType_QgsExpressionNodeInOperator;
        break;
      case QgsPointCloudExpressionNode::ntLiteral:
        sipType = sipType_QgsPointCloudExpressionNodeLiteral;
        break;
      case QgsPointCloudExpressionNode::ntAttributeRef:
        sipType = sipType_QgsPointCloudExpressionNodeAttributeRef;
        break;
      default:
        sipType = 0;
        break;
    }
%End
  public:

    enum NodeType
    {
      ntUnaryOperator,
      ntBinaryOperator,
      ntInOperator,
      ntLiteral,
      ntAttributeRef,
    };


    class NodeList
{
%Docstring(signature="appended")
A list of expression nodes.
%End

%TypeHeaderCode
#include "qgspointcloudexpressionnode.h"
%End
      public:
        virtual ~NodeList();
        void append( QgsPointCloudExpressionNode *node /Transfer/ );
%Docstring
Takes ownership of the provided node
%End

        int count() const;
%Docstring
Returns the number of nodes in the list.
%End

        QList<QgsPointCloudExpressionNode *> list();
%Docstring
Gets a list of all the nodes.
%End

        QgsPointCloudExpressionNode *at( int i );
%Docstring
Gets the node at position i in the list.

.. versionadded:: 3.26
%End

        QStringList names() const;
%Docstring
Returns a list of names for nodes. Unnamed nodes will be indicated by an empty string in the list.

.. versionadded:: 3.26
%End

        QgsPointCloudExpressionNode::NodeList *clone() const /Factory/;
%Docstring
Creates a deep copy of this list. Ownership is transferred to the caller
%End

        virtual QString dump() const;
%Docstring
Returns a string dump of the expression node.
%End

      public:
    };

    virtual ~QgsPointCloudExpressionNode();

    virtual QgsPointCloudExpressionNode::NodeType nodeType() const = 0;
%Docstring
Gets the type of this node.

:return: The type of this node
%End

    virtual QString dump() const = 0;
%Docstring
Dump this node into a serialized (part) of an expression.
The returned expression does not necessarily literally match
the original expression, it's just guaranteed to behave the same way.
%End

    double eval( QgsPointCloudExpression *parent, int p );
%Docstring
Evaluate this node for the given point and parent.
This will return a cached value if it has been determined to be static
during the :py:func:`~QgsPointCloudExpressionNode.prepare` execution.

.. versionadded:: 3.26
%End

    virtual QgsPointCloudExpressionNode *clone() const = 0;
%Docstring
Generate a clone of this node.
Ownership is transferred to the caller.

:return: a deep copy of this node.
%End

    virtual QSet<QString> referencedAttributes() const = 0;
%Docstring
Abstract virtual method which returns a list of columns required to
evaluate this node.

When reimplementing this, you need to return any attribute that is required to
evaluate this node and in addition recursively collect all the attributes required
to evaluate child nodes.

:return: A list of attributes required to evaluate this expression
%End

    virtual bool isStatic( QgsPointCloudExpression *parent, const QgsPointCloudBlock *block ) const = 0;
%Docstring
Returns ``True`` if this node can be evaluated for a static value. This is used during
the :py:func:`~QgsPointCloudExpressionNode.prepare` step and in case it returns ``True``, the value of this node will already
be evaluated and the result cached (and therefore not re-evaluated in subsequent calls
to :py:func:`~QgsPointCloudExpressionNode.eval`). In case this returns ``True``, :py:func:`~QgsPointCloudExpressionNode.prepareNode` will never be called.

.. versionadded:: 3.26
%End

    bool prepare( QgsPointCloudExpression *parent, const QgsPointCloudBlock *block );
%Docstring
Prepare this node for evaluation.
This will check if the node content is static and in this case cache the value.
If it's not static it will call :py:func:`~QgsPointCloudExpressionNode.prepareNode` to allow the node to do initialization
work like for example resolving an attribute name to an attribute index.

.. versionadded:: 3.26
%End

    int parserFirstLine;

    int parserFirstColumn;

    int parserLastLine;

    int parserLastColumn;

    bool hasCachedStaticValue() const;
%Docstring
Returns ``True`` if the node can be replaced by a static cached value.

.. seealso:: :py:func:`cachedStaticValue`

.. versionadded:: 3.26
%End

    double cachedStaticValue() const;
%Docstring
Returns the node's static cached value. Only valid if :py:func:`~QgsPointCloudExpressionNode.hasCachedStaticValue` is ``True``.

.. seealso:: :py:func:`hasCachedStaticValue`

.. versionadded:: 3.26
%End

  protected:

    QgsPointCloudExpressionNode();
%Docstring
Constructor.
%End

    QgsPointCloudExpressionNode( const QgsPointCloudExpressionNode &other );
%Docstring
Copy constructor
%End



};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/expression/qgspointcloudexpressionnode.h         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
