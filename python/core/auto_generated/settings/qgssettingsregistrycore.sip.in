/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/settings/qgssettingsregistrycore.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
class QgsSettingsEntryEnumFlag_settingsDigitizingOffsetCapStyle
{
%TypeHeaderCode
#include "qgssettingsregistrycore.h"
#include "qgssettingsentry.h"
typedef QgsSettingsEntryEnumFlag<QgsGeometry::EndCapStyle> QgsSettingsEntryEnumFlag_settingsDigitizingOffsetCapStyle;
%End
  public:
    QgsSettingsEntryEnumFlag_settingsDigitizingOffsetCapStyle( const QString &key, QgsSettings::Section section, const QgsGeometry::EndCapStyle &defaultValue, const QString &description = QString() );
    QString key( const QString &dynamicKeyPart = QString() ) const;
    QgsGeometry::EndCapStyle value( const QString &dynamicKeyPart = QString(), bool useDefaultValueOverride = false, const QgsGeometry::EndCapStyle &defaultValueOverride = QgsGeometry::EndCapStyle() ) const;
};
class QgsSettingsEntryEnumFlag_settingsDigitizingOffsetJoinStyle
{
%TypeHeaderCode
#include "qgssettingsregistrycore.h"
#include "qgssettingsentry.h"
typedef QgsSettingsEntryEnumFlag<QgsGeometry::JoinStyle> QgsSettingsEntryEnumFlag_settingsDigitizingOffsetJoinStyle;
%End
  public:
    QgsSettingsEntryEnumFlag_settingsDigitizingOffsetJoinStyle( const QString &key, QgsSettings::Section section, const QgsGeometry::JoinStyle &defaultValue, const QString &description = QString() );
    QString key( const QString &dynamicKeyPart = QString() ) const;
    QgsGeometry::JoinStyle value( const QString &dynamicKeyPart = QString(), bool useDefaultValueOverride = false, const QgsGeometry::JoinStyle &defaultValueOverride = QgsGeometry::JoinStyle() ) const;
};
class QgsSettingsEntryEnumFlag_settingsDigitizingSearchRadiusVertexEditUnit
{
%TypeHeaderCode
#include "qgssettingsregistrycore.h"
#include "qgssettingsentry.h"
typedef QgsSettingsEntryEnumFlag<QgsTolerance::UnitType> QgsSettingsEntryEnumFlag_settingsDigitizingSearchRadiusVertexEditUnit;
%End
  public:
    QgsSettingsEntryEnumFlag_settingsDigitizingSearchRadiusVertexEditUnit( const QString &key, QgsSettings::Section section, const QgsTolerance::UnitType &defaultValue, const QString &description = QString() );
    QString key( const QString &dynamicKeyPart = QString() ) const;
    QgsTolerance::UnitType value( const QString &dynamicKeyPart = QString(), bool useDefaultValueOverride = false, const QgsTolerance::UnitType &defaultValueOverride = QgsTolerance::UnitType() ) const;
};
class QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnappingToleranceUnit
{
%TypeHeaderCode
#include "qgssettingsregistrycore.h"
#include "qgssettingsentry.h"
typedef QgsSettingsEntryEnumFlag<QgsTolerance::UnitType> QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnappingToleranceUnit;
%End
  public:
    QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnappingToleranceUnit( const QString &key, QgsSettings::Section section, const QgsTolerance::UnitType &defaultValue, const QString &description = QString() );
    QString key( const QString &dynamicKeyPart = QString() ) const;
    QgsTolerance::UnitType value( const QString &dynamicKeyPart = QString(), bool useDefaultValueOverride = false, const QgsTolerance::UnitType &defaultValueOverride = QgsTolerance::UnitType() ) const;
};
class QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnapType
{
%TypeHeaderCode
#include "qgssettingsregistrycore.h"
#include "qgssettingsentry.h"
typedef QgsSettingsEntryEnumFlag<QgsSnappingConfig::SnappingTypes> QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnapType;
%End
  public:
    QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnapType( const QString &key, QgsSettings::Section section, const QgsSnappingConfig::SnappingTypes &defaultValue, const QString &description = QString() );
    QString key( const QString &dynamicKeyPart = QString() ) const;
    QgsSnappingConfig::SnappingTypes value( const QString &dynamicKeyPart = QString(), bool useDefaultValueOverride = false, const QgsSnappingConfig::SnappingTypes &defaultValueOverride = QgsSnappingConfig::SnappingTypes() ) const;
};





class QgsSettingsRegistryCore : QgsSettingsRegistry
{
%Docstring(signature="appended")
:py:class:`QgsSettingsRegistryCore` is used for settings introspection and collects all
:py:class:`QgsSettingsEntry` instances of core.

.. versionadded:: 3.20
%End

%TypeHeaderCode
#include "qgssettingsregistrycore.h"
%End
  public:

    QgsSettingsRegistryCore();
%Docstring
Constructor for QgsSettingsRegistryCore.
%End

    virtual ~QgsSettingsRegistryCore();

    const QgsSettingsEntryInteger settingsDigitizingStreamTolerance;

    const QgsSettingsEntryInteger settingsDigitizingLineWidth;

    const QgsSettingsEntryInteger settingsDigitizingLineColorRed;

    const QgsSettingsEntryInteger settingsDigitizingLineColorGreen;

    const QgsSettingsEntryInteger settingsDigitizingLineColorBlue;

    const QgsSettingsEntryInteger settingsDigitizingLineColorAlpha;

    const QgsSettingsEntryDouble settingsDigitizingLineColorAlphaScale;

    const QgsSettingsEntryInteger settingsDigitizingFillColorRed;

    const QgsSettingsEntryInteger settingsDigitizingFillColorGreen;

    const QgsSettingsEntryInteger settingsDigitizingFillColorBlue;

    const QgsSettingsEntryInteger settingsDigitizingFillColorAlpha;

    const QgsSettingsEntryBool settingsDigitizingLineGhost;

    const QgsSettingsEntryDouble settingsDigitizingDefaultZValue;

    const QgsSettingsEntryBool settingsDigitizingDefaultSnapEnabled;

    const QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnapType settingsDigitizingDefaultSnapType;

    const QgsSettingsEntryDouble settingsDigitizingDefaultSnappingTolerance;

    const QgsSettingsEntryEnumFlag_settingsDigitizingDefaultSnappingToleranceUnit settingsDigitizingDefaultSnappingToleranceUnit;

    const QgsSettingsEntryDouble settingsDigitizingSearchRadiusVertexEdit;

    const QgsSettingsEntryEnumFlag_settingsDigitizingSearchRadiusVertexEditUnit settingsDigitizingSearchRadiusVertexEditUnit;

    const QgsSettingsEntryColor settingsDigitizingSnapColor;

    const QgsSettingsEntryBool settingsDigitizingSnapTooltip;

    const QgsSettingsEntryBool settingsDigitizingSnapInvisibleFeature;

    const QgsSettingsEntryBool settingsDigitizingMarkerOnlyForSelected;

    const QgsSettingsEntryString settingsDigitizingMarkerStyle;

    const QgsSettingsEntryDouble settingsDigitizingMarkerSizeMm;

    const QgsSettingsEntryBool settingsDigitizingReuseLastValues;

    const QgsSettingsEntryBool settingsDigitizingDisableEnterAttributeValuesDialog;

    const QgsSettingsEntryInteger settingsDigitizingValidateGeometries;

    const QgsSettingsEntryEnumFlag_settingsDigitizingOffsetJoinStyle settingsDigitizingOffsetJoinStyle;

    const QgsSettingsEntryInteger settingsDigitizingOffsetQuadSeg;

    const QgsSettingsEntryDouble settingsDigitizingOffsetMiterLimit;

    const QgsSettingsEntryBool settingsDigitizingConvertToCurve;

    const QgsSettingsEntryDouble settingsDigitizingConvertToCurveAngleTolerance;

    const QgsSettingsEntryDouble settingsDigitizingConvertToCurveDistanceTolerance;

    const QgsSettingsEntryEnumFlag_settingsDigitizingOffsetCapStyle settingsDigitizingOffsetCapStyle;

    const QgsSettingsEntryBool settingsDigitizingOffsetShowAdvanced;

    const QgsSettingsEntryInteger settingsDigitizingTracingMaxFeatureCount;

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/settings/qgssettingsregistrycore.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
